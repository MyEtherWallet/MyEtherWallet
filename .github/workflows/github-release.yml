name: create github release [v6]

on:
  push:
    tags:
      - 'v6.*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main

      - name: verify tag
        run: |
          git branch --contains $GITHUB_SHA | sed -e 's/^[ \t *]*//' | grep '^main$'
          git checkout $GITHUB_SHA

      - name: setup env
        id: node-version
        run: |
          docker build -t mew-build-container .
          echo ::set-output name=NODE_VERSION::$(docker run --rm -v `pwd`:/home:rw mew-build-container /bin/bash -c "node --version")

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{steps.node-version.outputs.NODE_VERSION}}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{steps.node-version.outputs.NODE_VERSION}}-

      - name: npm install
        run: docker run --rm -v `pwd`:/home:rw --user "$(id -u):$(id -g)" mew-build-container /bin/bash -c "npm install"

      - name: build
        run: docker run --rm -v `pwd`:/home:rw mew-build-container /bin/bash -c "npm run build:offline"

      - name: Get release tag
        id: get_release_tag
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: create release
        env:
          GITHUB_TOKEN: ${{secrets.MEW_BOT_TOKEN}}
        run: |
          openssl aes-256-cbc -K ${{secrets.FILE_DECRYPT_KEY}} -iv ${{secrets.FILE_DECRYPT_IV}} -in ssh-keys.tar.enc -out ssh-keys.tar -d
          tar xvf ssh-keys.tar
          gpg --allow-secret-key-import --import mew-sign.gpg
          bash ./release.sh ${{ steps.get_release_tag.outputs.VERSION }} $GITHUB_TOKEN $GITHUB_REPOSITORY true
